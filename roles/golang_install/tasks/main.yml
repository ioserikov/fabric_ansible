 
  - name: check current golang version
    command: bash -c "/usr/local/go/bin/go version|sed -e 's/go version go//g'|cut -d' ' -f1"
    ignore_errors: yes
    register: go_version
    changed_when: false
 

  
  
  - debug: msg="go_version={{go_version.stdout}}"
  - debug: msg="new_go_version={{new_go_version}}"



 
 # TODO - exit without fail  if go is working

 # - name: continue only when version is older
 #   fail: msg="Version already exists"
 #   when: go_version.stdout != "" and "go_version.stdout"
  
  - debug: msg="continuing with installation"
 
  - name: download golang tar 
    get_url:
      url: "https://storage.googleapis.com/golang/go{{new_go_version}}.linux-amd64.tar.gz"
      dest: "{{home_dir}}"
      
      #mode: 0440
    become: no 
    when: go_version.stdout != new_go_version

  - name: Remove old installation of Go
    file:
      path: /usr/local/go
      state: absent
    become: yes
    when:  go_version.stdout != new_go_version


  - name: Extract the Go tarball
    unarchive:
      src: "{{home_dir}}/go{{new_go_version}}.linux-amd64.tar.gz"
      dest: /usr/local
      copy: no
    become: yes
    when:  go_version.stdout != new_go_version

  - name: create go directories in home
    file:
      path: "{{item}}"
      state: directory
    with_items:
    - "{{home_dir}}go"
    - "{{home_dir}}go/bin"
    become: no
    when:  go_version.stdout != new_go_version
  
  
  - name: modify .bashrc
    blockinfile:
      dest: "{{home_dir}}/.bashrc"
      block: |
        export GOPATH=$HOME/go
        export PATH=$PATH:/usr/local/go/bin
      marker: '# {mark} ANSIBLE MANAGED BLOCK - changes for golang'
      insertafter: EOF
      create: yes
    become: no   
    when:  go_version.stdout != new_go_version


  - name: export for current session
    shell: "{{ item }}"
    with_items:
    - export GOPATH=$HOME/go
    - export PATH=$PATH:/usr/local/go/bin
    become: no  
    when:  go_version.stdout != new_go_version
